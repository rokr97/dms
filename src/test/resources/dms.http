### Upload valid document with document name provided by a user
POST http://localhost:8080/dms/documents/
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="ownerId"
Content-Type: text/plain

user1@bank.my
--WebAppBoundary
Content-Disposition: form-data; name="documentName"
Content-Type: text/plain

my-pdf-document
--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="my.pdf"
Content-Type: application/sotona

< ./test-pdf-document.pdf
--WebAppBoundary--

> {%
client.test("Document successfully uploaded", function() {
  client.assert(response.status === 201, "Response status is not 201 ('created'), actual value is " + response.status);
});

var location = response.headers.valueOf("Location");
client.global.set('first_document_location', location);

client.test("'Location' header is set in response", function() {
  var uuidPattern = "[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}"
  var documentResourcePathPattern = "/dms/documents/" + uuidPattern
  client.assert(location.search(documentResourcePathPattern) > -1, "Expected location to match 'http://{host}:{port}/dms/documents/{uuid}' pattern but actual value is " + location);
});
%}

### Download uploaded document
GET {{first_document_location}}
Accept: application/pdf

> {%
client.test("Document successfully downloaded", function() {
  client.assert(response.status === 200, "Response status is not 200, actual value is " + response.status);
});

client.test("Response content-type is json", function() {
  var type = response.contentType.mimeType;
  client.assert(type === "application/pdf", "Expected 'application/pdf' but received '" + type + "'");
});
%}

### Upload valid document (no document name specified)
POST http://localhost:8080/dms/documents/
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="ownerId"
Content-Type: text/plain

user1@bank.my
--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="second.pdf"
Content-Type: application/sotona

< ./test-pdf-document.pdf
--WebAppBoundary--

> {%
var location = response.headers.valueOf("Location");
client.global.set('first_document_location', location);

client.test("Document successfully uploaded", function() {
  client.assert(response.status === 201, "Response status is not 201 ('created'), actual value is " + response.status);
});
%}

### Get a list of all documents
GET http://localhost:8080/dms/documents/
Accept: application/json

> {%
client.test("'List all documents' executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
});

function findDocumentByNameInResponse(documentName){
  return response.body.filter(function(x) {return x.documentName === documentName;}) != null;
}
client.test("First document presents in the list", function() {
 client.assert(findDocumentByNameInResponse("my.pdf"), "Cannot find first document in response");
});

client.test("Second document presents in the list", function() {
  client.assert(findDocumentByNameInResponse("second.pdf"), "Cannot find second document in response");
});
%}

### Delete first document
DELETE {{first_document_location}}

> {%
client.test("Document deleted successfully", function() {
  client.assert(response.status === 204, "Response status is not 204 ('no content'), actual value is " + response.status);
});

%}

### Try deleting first document again
DELETE {{first_document_location}}

> {%
client.test("Non-existing document is not deleted", function() {
  client.assert(response.status === 404, "Response status is not 404 ('not found'), actual value is " + response.status);
});

%}

### Get non-existing document with random uuid
GET http://localhost:8080/dms/documents/{{$uuid}}
Accept: application/json

> {%
client.test("Resource with random UUID is not found", function() {
  client.assert(response.status === 404, "Response status is not 404, actual value is " + response.status);
});
%}

### Reject zero-sized document upload

### Reject non-pdf document upload

